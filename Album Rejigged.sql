CREATE TYPE ALBUM_TYPE3 AS OBJECT
(ALBUM_ID VARCHAR2(50),
TITLE VARCHAR2(100),
/*NAME OF THE ALBUM*/
PLAYTIME  NUMBER(4),
/*ALBUM LENGTH IN NUMBER OF MINUTES*/
GENRE VARCHAR2(30),
RELEASE_DATE  DATE,
/* THE DATE ON WHICH THE FIRST FORMAT OF THE ALBUM WAS RELEASED*/
TRACK TRACKS,
REVIEWS REVIEWS_TABLE,
BASE_PRICE NUMBER(10,2),
NOT FINAL MEMBER FUNCTION DISCOUNTPRICE RETURN NUMBER) NOT FINAL;
/
CREATE TYPE CD_TYPE3 UNDER ALBUM_TYPE3
(NEW_OR_USED NUMBER(1),
/*1 FOR NEW, 0 FOR USED*/
PRICE NUMBER(5,2)
/*ALBUM PRICE IN $*/);
/
CREATE TYPE VINYL_TYPE3 UNDER ALBUM_TYPE3
(NEW_OR_USED NUMBER(1),
/*1 FOR NEW, 0 FOR USED*/
PRICE NUMBER(5,2)
/*ALBUM PRICE IN $*/);
/
CREATE TYPE ROLE_TYPE3 AS OBJECT
(ARTIST_ID  REF ARTIST_TYPE,
ALBUM_ID  REF ALBUM_TYPE3,
ROLE  VARCHAR2(20)
/*ROLE THE ARTIST PLAYED ON THE ALBUM*/);
/
CREATE TYPE ALSO_BOUGHT_TYPE3 AS OBJECT
(ALBUM_1_ID REF ALBUM_TYPE3,
ALBUM_2_ID REF ALBUM_TYPE3);
/
CREATE TABLE ALBUM3 OF ALBUM_TYPE3
  NESTED TABLE REVIEWS STORE AS REVIEWS_TAB3;
CREATE TABLE CD3 OF CD_TYPE3
  NESTED TABLE REVIEWS STORE AS CD_REVIEWS_TAB3;
CREATE TABLE VINYL3 OF VINYL_TYPE3
  NESTED TABLE REVIEWS STORE AS VINYL_REVIEWS_TAB3;
CREATE TABLE ROLE3 OF ROLE_TYPE3;
CREATE TABLE ALSO_BOUGHT3 OF ALSO_BOUGHT_TYPE3;
/
