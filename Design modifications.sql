DROP TABLE MP3;
DROP TABLE CD;
DROP TABLE VINYL;
DROP TABLE TAPE;
DROP TABLE PLAYLIST;
DROP TABLE ALSO_BOUGHT;
DROP TABLE ROLE;
DROP TABLE ALBUM;
DROP TABLE ARTIST;
DROP TYPE PLAYLIST_TYPE;
DROP TYPE PLAYLIST_TRACKS;
DROP TYPE PLAYLIST_TRACKS_TYPE;
DROP TYPE ALSO_BOUGHT_TYPE;
DROP TYPE ROLE_TYPE;
DROP TYPE MP3_TYPE;
DROP TYPE CD_TYPE;
DROP TYPE TAPE_TYPE;
DROP TYPE VINYL_TYPE;
DROP TYPE ALBUM_TYPE;
DROP TYPE REVIEWS_TABLE;
DROP TYPE TRACKS;
DROP TYPE REVIEW_TYPE;
DROP TYPE TRACK_TYPE;
DROP TYPE ARTIST_TYPE;
/
CREATE TYPE ARTIST_TYPE AS OBJECT
(ARTIST_ID  VARCHAR2(50),
ARTIST_NAME VARCHAR2(50));
/
CREATE TYPE TRACK_TYPE AS OBJECT
(TRACK_ID NUMBER(9),
SONG_TITLE  VARCHAR2(100),
SONG_DURATION NUMBER(4),
/* Duration expressed as number of seconds*/
SONG_PRICE  NUMBER(4,2),
/*TRACK PRICE EXPRESSED AS A NUMBER OF CENTS*/
DL_COUNT  NUMBER(10));
/
CREATE TYPE REVIEW_TYPE AS OBJECT
(REVIEW_ID  NUMBER(9),
REVIEWER_NAME VARCHAR2(20),
REVIEW_TEXT CLOB,
/*TEXT OF THE REVIEW*/
REVIEW_SCORE NUMBER(2,1),
/*REVIEW SCORE OUT OF 5*/
REVIEW_DATE DATE,
NOT FINAL MEMBER FUNCTION AVGREVIEWSCORE RETURN NUMBER) NOT FINAL;
/
CREATE OR REPLACE TYPE BODY REVIEW_TYPE AS 
MEMBER FUNCTION AVGREVIEWSCORE RETURN NUMBER IS
AVGSCORE  NUMBER(4,2);
BEGIN
  DECLARE  RCOUNT NUMBER;
    RTOTAL  NUMBER;
  BEGIN
  IF REVIEWER_NAME IS NULL THEN
    RCOUNT:= RCOUNT+1;
    RTOTAL:= RTOTAL+REVIEW_SCORE;
  END IF;
  AVGSCORE:= RTOTAL/RCOUNT;
  RETURN AVGSCORE; 
  END;
END AVGREVIEWSCORE;
END;
/
CREATE TYPE TRACKS AS VARRAY(100) OF TRACK_TYPE;
/
CREATE TYPE REVIEWS_TABLE AS TABLE OF REVIEW_TYPE;
/
CREATE TYPE ALBUM_TYPE AS OBJECT
(ALBUM_ID VARCHAR2(50),
TITLE VARCHAR2(100),
/*NAME OF THE ALBUM*/
PLAYTIME  NUMBER(4),
/*ALBUM LENGTH IN NUMBER OF MINUTES*/
GENRE VARCHAR2(30),
RELEASE_DATE  DATE,
/* THE DATE ON WHICH THE FIRST FORMAT OF THE ALBUM WAS RELEASED*/
TRACK TRACKS,
REVIEWS REVIEWS_TABLE,
NOT FINAL MEMBER FUNCTION DISCOUNTPRICE RETURN NUMBER)NOT INSTANTIABLE NOT FINAL;
/
CREATE OR REPLACE TYPE BODY ALBUM_TYPE AS
MEMBER FUNCTION DISCOUNTPRICE RETURN NUMBER IS
BEGIN
  RETURN PLAYTIME;
END DISCOUNTPRICE;
END;
/
CREATE TYPE VINYL_TYPE UNDER ALBUM_TYPE
(NEW_OR_USED NUMBER(1),
/*1 FOR NEW, 0 FOR USED*/
PRICE NUMBER(5,2),
/*ALBUM PRICE IN $*/
OVERRIDING MEMBER FUNCTION DISCOUNTPRICE RETURN NUMBER);
/
CREATE OR REPLACE TYPE BODY VINYL_TYPE AS
OVERRIDING MEMBER FUNCTION DISCOUNTPRICE RETURN NUMBER IS
NEWPRICE  NUMBER;
BEGIN
IF (GENRE = 'ROCK') THEN
  NEWPRICE := PRICE * 0.85;
ELSIF (GENRE = 'JAZZ') THEN
  NEWPRICE := PRICE * 0.8;
ELSE
  NEWPRICE := PRICE;
END IF;
RETURN NEWPRICE;
END DISCOUNTPRICE;
END;
/
CREATE TYPE TAPE_TYPE UNDER ALBUM_TYPE
(NEW_OR_USED NUMBER(1),
/*1 FOR NEW, 0 FOR USED*/
PRICE NUMBER(5,2)
/*ALBUM PRICE IN $*/);
/
CREATE TYPE CD_TYPE UNDER ALBUM_TYPE
(NEW_OR_USED NUMBER(1),
/*1 FOR NEW, 0 FOR USED*/
PRICE NUMBER(5,2),
/*ALBUM PRICE IN $*/
OVERRIDING MEMBER FUNCTION DISCOUNTPRICE RETURN NUMBER);
/
CREATE OR REPLACE TYPE BODY CD_TYPE AS
OVERRIDING MEMBER FUNCTION DISCOUNTPRICE RETURN NUMBER IS
NEWPRICE NUMBER;
BEGIN
IF (NEW_OR_USED = 1 AND GENRE = 'CLASSICAL') THEN
  NEWPRICE := PRICE * 0.75;
ELSE
  NEWPRICE := PRICE;
END IF;
END DISCOUNTPRICE;
END;
/
CREATE TYPE MP3_TYPE UNDER ALBUM_TYPE
(PRICE NUMBER(5,2)
/*ALBUM PRICE IN $*/);
/
CREATE TYPE ROLE_TYPE AS OBJECT
(ARTIST_ID  REF ARTIST_TYPE,
ALBUM_ID  REF ALBUM_TYPE,
ROLE  VARCHAR2(20)
/*ROLE THE ARTIST PLAYED ON THE ALBUM*/);
/
CREATE TYPE ALSO_BOUGHT_TYPE AS OBJECT
(ALBUM_1_ID REF ALBUM_TYPE,
ALBUM_2_ID REF  ALBUM_TYPE);
/
CREATE TYPE PLAYLIST_TRACKS_TYPE AS OBJECT
(ALBUM_ID REF ALBUM_TYPE,
TRACK_ID REF TRACK_TYPE,
TRACK_NO  NUMBER(2)
/*NUMBER IN PLAYLIST*/);
/
CREATE TYPE PLAYLIST_TRACKS AS VARRAY(15) OF PLAYLIST_TRACKS_TYPE;
/
CREATE TYPE PLAYLIST_TYPE AS OBJECT
(PLAY_NO NUMBER(10),
/*UNIQUE PLAYLIST NUMBER*/
PLAYLIST_NAME VARCHAR(20),
/*NAME OF THE PLAYLIST*/
TRACKS  PLAYLIST_TRACKS
/*TRACKS IN PLAYLIST*/)
/
CREATE TABLE ARTIST OF ARTIST_TYPE;
CREATE TABLE ALBUM OF ALBUM_TYPE
  NESTED TABLE REVIEWS STORE AS REVIEWS_TAB;
CREATE TABLE ROLE OF ROLE_TYPE;
CREATE TABLE ALSO_BOUGHT OF ALSO_BOUGHT_TYPE;
CREATE TABLE PLAYLIST OF PLAYLIST_TYPE;
CREATE TABLE TAPE OF TAPE_TYPE
  NESTED TABLE REVIEWS STORE AS REVIEWS_TAPE;
CREATE TABLE CD OF CD_TYPE
  NESTED TABLE REVIEWS STORE AS REVIEWS_CD;
CREATE TABLE VINYL OF VINYL_TYPE
  NESTED TABLE REVIEWS STORE AS REVIEWS_VINYL;
CREATE TABLE MP3 OF MP3_TYPE
  NESTED TABLE REVIEWS STORE AS REVIEWS_MP3;
/